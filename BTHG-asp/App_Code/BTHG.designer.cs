#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BTHGMSDB")]
public partial class BTHGDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Définitions de méthodes d'extensibilité
  partial void OnCreated();
  partial void InserttbBrand(tbBrand instance);
  partial void UpdatetbBrand(tbBrand instance);
  partial void DeletetbBrand(tbBrand instance);
  partial void InserttbSupply(tbSupply instance);
  partial void UpdatetbSupply(tbSupply instance);
  partial void DeletetbSupply(tbSupply instance);
  partial void InserttbBuyingHistory(tbBuyingHistory instance);
  partial void UpdatetbBuyingHistory(tbBuyingHistory instance);
  partial void DeletetbBuyingHistory(tbBuyingHistory instance);
  partial void InserttbBuyingHistoryDetail(tbBuyingHistoryDetail instance);
  partial void UpdatetbBuyingHistoryDetail(tbBuyingHistoryDetail instance);
  partial void DeletetbBuyingHistoryDetail(tbBuyingHistoryDetail instance);
  partial void InserttbCustomer(tbCustomer instance);
  partial void UpdatetbCustomer(tbCustomer instance);
  partial void DeletetbCustomer(tbCustomer instance);
  partial void InserttbCustomerContact(tbCustomerContact instance);
  partial void UpdatetbCustomerContact(tbCustomerContact instance);
  partial void DeletetbCustomerContact(tbCustomerContact instance);
  partial void InserttbLogin(tbLogin instance);
  partial void UpdatetbLogin(tbLogin instance);
  partial void DeletetbLogin(tbLogin instance);
  partial void InserttbPriceHistory(tbPriceHistory instance);
  partial void UpdatetbPriceHistory(tbPriceHistory instance);
  partial void DeletetbPriceHistory(tbPriceHistory instance);
  partial void InserttbProduct(tbProduct instance);
  partial void UpdatetbProduct(tbProduct instance);
  partial void DeletetbProduct(tbProduct instance);
  partial void InserttbProductGroup(tbProductGroup instance);
  partial void UpdatetbProductGroup(tbProductGroup instance);
  partial void DeletetbProductGroup(tbProductGroup instance);
  partial void InserttbProductType(tbProductType instance);
  partial void UpdatetbProductType(tbProductType instance);
  partial void DeletetbProductType(tbProductType instance);
  partial void InserttbSellingHistory(tbSellingHistory instance);
  partial void UpdatetbSellingHistory(tbSellingHistory instance);
  partial void DeletetbSellingHistory(tbSellingHistory instance);
  partial void InserttbSellingHistoryDetail(tbSellingHistoryDetail instance);
  partial void UpdatetbSellingHistoryDetail(tbSellingHistoryDetail instance);
  partial void DeletetbSellingHistoryDetail(tbSellingHistoryDetail instance);
  partial void InserttbStaff(tbStaff instance);
  partial void UpdatetbStaff(tbStaff instance);
  partial void DeletetbStaff(tbStaff instance);
  partial void InserttbSupplier(tbSupplier instance);
  partial void UpdatetbSupplier(tbSupplier instance);
  partial void DeletetbSupplier(tbSupplier instance);
  partial void InserttbSupplierContact(tbSupplierContact instance);
  partial void UpdatetbSupplierContact(tbSupplierContact instance);
  partial void DeletetbSupplierContact(tbSupplierContact instance);
  partial void InserttbLanguage(tbLanguage instance);
  partial void UpdatetbLanguage(tbLanguage instance);
  partial void DeletetbLanguage(tbLanguage instance);
  partial void InserttbLanguageConcept(tbLanguageConcept instance);
  partial void UpdatetbLanguageConcept(tbLanguageConcept instance);
  partial void DeletetbLanguageConcept(tbLanguageConcept instance);
  partial void InserttbLanguageTranslation(tbLanguageTranslation instance);
  partial void UpdatetbLanguageTranslation(tbLanguageTranslation instance);
  partial void DeletetbLanguageTranslation(tbLanguageTranslation instance);
  partial void InserttbQuotation(tbQuotation instance);
  partial void UpdatetbQuotation(tbQuotation instance);
  partial void DeletetbQuotation(tbQuotation instance);
  #endregion
	
	public BTHGDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BTHGConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public BTHGDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public BTHGDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public BTHGDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public BTHGDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<tbBrand> tbBrand
	{
		get
		{
			return this.GetTable<tbBrand>();
		}
	}
	
	public System.Data.Linq.Table<tbSupply> tbSupply
	{
		get
		{
			return this.GetTable<tbSupply>();
		}
	}
	
	public System.Data.Linq.Table<tbBuyingHistory> tbBuyingHistory
	{
		get
		{
			return this.GetTable<tbBuyingHistory>();
		}
	}
	
	public System.Data.Linq.Table<tbBuyingHistoryDetail> tbBuyingHistoryDetail
	{
		get
		{
			return this.GetTable<tbBuyingHistoryDetail>();
		}
	}
	
	public System.Data.Linq.Table<tbCustomer> tbCustomer
	{
		get
		{
			return this.GetTable<tbCustomer>();
		}
	}
	
	public System.Data.Linq.Table<tbCustomerContact> tbCustomerContact
	{
		get
		{
			return this.GetTable<tbCustomerContact>();
		}
	}
	
	public System.Data.Linq.Table<tbLogin> tbLogin
	{
		get
		{
			return this.GetTable<tbLogin>();
		}
	}
	
	public System.Data.Linq.Table<tbPriceHistory> tbPriceHistory
	{
		get
		{
			return this.GetTable<tbPriceHistory>();
		}
	}
	
	public System.Data.Linq.Table<tbProduct> tbProduct
	{
		get
		{
			return this.GetTable<tbProduct>();
		}
	}
	
	public System.Data.Linq.Table<tbProductGroup> tbProductGroup
	{
		get
		{
			return this.GetTable<tbProductGroup>();
		}
	}
	
	public System.Data.Linq.Table<tbProductType> tbProductType
	{
		get
		{
			return this.GetTable<tbProductType>();
		}
	}
	
	public System.Data.Linq.Table<tbSellingHistory> tbSellingHistory
	{
		get
		{
			return this.GetTable<tbSellingHistory>();
		}
	}
	
	public System.Data.Linq.Table<tbSellingHistoryDetail> tbSellingHistoryDetail
	{
		get
		{
			return this.GetTable<tbSellingHistoryDetail>();
		}
	}
	
	public System.Data.Linq.Table<tbStaff> tbStaff
	{
		get
		{
			return this.GetTable<tbStaff>();
		}
	}
	
	public System.Data.Linq.Table<tbSupplier> tbSupplier
	{
		get
		{
			return this.GetTable<tbSupplier>();
		}
	}
	
	public System.Data.Linq.Table<tbSupplierContact> tbSupplierContact
	{
		get
		{
			return this.GetTable<tbSupplierContact>();
		}
	}
	
	public System.Data.Linq.Table<tbLanguage> tbLanguage
	{
		get
		{
			return this.GetTable<tbLanguage>();
		}
	}
	
	public System.Data.Linq.Table<tbLanguageConcept> tbLanguageConcept
	{
		get
		{
			return this.GetTable<tbLanguageConcept>();
		}
	}
	
	public System.Data.Linq.Table<tbLanguageTranslation> tbLanguageTranslation
	{
		get
		{
			return this.GetTable<tbLanguageTranslation>();
		}
	}
	
	public System.Data.Linq.Table<tbQuotation> tbQuotation
	{
		get
		{
			return this.GetTable<tbQuotation>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbBrand")]
public partial class tbBrand : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDBrand;
	
	private string _Name;
	
	private string _Origin;
	
	private EntitySet<tbProduct> _tbProduct;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBrandChanging(int value);
    partial void OnIDBrandChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOriginChanging(string value);
    partial void OnOriginChanged();
    #endregion
	
	public tbBrand()
	{
		this._tbProduct = new EntitySet<tbProduct>(new Action<tbProduct>(this.attach_tbProduct), new Action<tbProduct>(this.detach_tbProduct));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBrand", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDBrand
	{
		get
		{
			return this._IDBrand;
		}
		set
		{
			if ((this._IDBrand != value))
			{
				this.OnIDBrandChanging(value);
				this.SendPropertyChanging();
				this._IDBrand = value;
				this.SendPropertyChanged("IDBrand");
				this.OnIDBrandChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string Origin
	{
		get
		{
			return this._Origin;
		}
		set
		{
			if ((this._Origin != value))
			{
				this.OnOriginChanging(value);
				this.SendPropertyChanging();
				this._Origin = value;
				this.SendPropertyChanged("Origin");
				this.OnOriginChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbBrand_tbProduct", Storage="_tbProduct", ThisKey="IDBrand", OtherKey="IDBrand")]
	public EntitySet<tbProduct> tbProduct
	{
		get
		{
			return this._tbProduct;
		}
		set
		{
			this._tbProduct.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbProduct(tbProduct entity)
	{
		this.SendPropertyChanging();
		entity.tbBrand = this;
	}
	
	private void detach_tbProduct(tbProduct entity)
	{
		this.SendPropertyChanging();
		entity.tbBrand = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbSupply")]
public partial class tbSupply : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDSupplier;
	
	private int _IDProduct;
	
	private EntityRef<tbProduct> _tbProduct;
	
	private EntityRef<tbSupplier> _tbSupplier;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSupplierChanging(int value);
    partial void OnIDSupplierChanged();
    partial void OnIDProductChanging(int value);
    partial void OnIDProductChanged();
    #endregion
	
	public tbSupply()
	{
		this._tbProduct = default(EntityRef<tbProduct>);
		this._tbSupplier = default(EntityRef<tbSupplier>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplier", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IDSupplier
	{
		get
		{
			return this._IDSupplier;
		}
		set
		{
			if ((this._IDSupplier != value))
			{
				if (this._tbSupplier.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDSupplierChanging(value);
				this.SendPropertyChanging();
				this._IDSupplier = value;
				this.SendPropertyChanged("IDSupplier");
				this.OnIDSupplierChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IDProduct
	{
		get
		{
			return this._IDProduct;
		}
		set
		{
			if ((this._IDProduct != value))
			{
				if (this._tbProduct.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDProductChanging(value);
				this.SendPropertyChanging();
				this._IDProduct = value;
				this.SendPropertyChanged("IDProduct");
				this.OnIDProductChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbSupply", Storage="_tbProduct", ThisKey="IDProduct", OtherKey="IDProduct", IsForeignKey=true)]
	public tbProduct tbProduct
	{
		get
		{
			return this._tbProduct.Entity;
		}
		set
		{
			tbProduct previousValue = this._tbProduct.Entity;
			if (((previousValue != value) 
						|| (this._tbProduct.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbProduct.Entity = null;
					previousValue.tbSupply.Remove(this);
				}
				this._tbProduct.Entity = value;
				if ((value != null))
				{
					value.tbSupply.Add(this);
					this._IDProduct = value.IDProduct;
				}
				else
				{
					this._IDProduct = default(int);
				}
				this.SendPropertyChanged("tbProduct");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSupplier_tbSupply", Storage="_tbSupplier", ThisKey="IDSupplier", OtherKey="IDSupplier", IsForeignKey=true)]
	public tbSupplier tbSupplier
	{
		get
		{
			return this._tbSupplier.Entity;
		}
		set
		{
			tbSupplier previousValue = this._tbSupplier.Entity;
			if (((previousValue != value) 
						|| (this._tbSupplier.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbSupplier.Entity = null;
					previousValue.tbSupply.Remove(this);
				}
				this._tbSupplier.Entity = value;
				if ((value != null))
				{
					value.tbSupply.Add(this);
					this._IDSupplier = value.IDSupplier;
				}
				else
				{
					this._IDSupplier = default(int);
				}
				this.SendPropertyChanged("tbSupplier");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbBuyingHistory")]
public partial class tbBuyingHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDBuyingHistory;
	
	private int _IDSupplier;
	
	private System.DateTime _OrderDate;
	
	private System.DateTime _DeliveryDate;
	
	private double _TotalPrice;
	
	private double _ShippingFee;
	
	private EntitySet<tbBuyingHistoryDetail> _tbBuyingHistoryDetail;
	
	private EntityRef<tbSupplier> _tbSupplier;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBuyingHistoryChanging(int value);
    partial void OnIDBuyingHistoryChanged();
    partial void OnIDSupplierChanging(int value);
    partial void OnIDSupplierChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnDeliveryDateChanging(System.DateTime value);
    partial void OnDeliveryDateChanged();
    partial void OnTotalPriceChanging(double value);
    partial void OnTotalPriceChanged();
    partial void OnShippingFeeChanging(double value);
    partial void OnShippingFeeChanged();
    #endregion
	
	public tbBuyingHistory()
	{
		this._tbBuyingHistoryDetail = new EntitySet<tbBuyingHistoryDetail>(new Action<tbBuyingHistoryDetail>(this.attach_tbBuyingHistoryDetail), new Action<tbBuyingHistoryDetail>(this.detach_tbBuyingHistoryDetail));
		this._tbSupplier = default(EntityRef<tbSupplier>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBuyingHistory", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDBuyingHistory
	{
		get
		{
			return this._IDBuyingHistory;
		}
		set
		{
			if ((this._IDBuyingHistory != value))
			{
				this.OnIDBuyingHistoryChanging(value);
				this.SendPropertyChanging();
				this._IDBuyingHistory = value;
				this.SendPropertyChanged("IDBuyingHistory");
				this.OnIDBuyingHistoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplier", DbType="Int NOT NULL")]
	public int IDSupplier
	{
		get
		{
			return this._IDSupplier;
		}
		set
		{
			if ((this._IDSupplier != value))
			{
				if (this._tbSupplier.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDSupplierChanging(value);
				this.SendPropertyChanging();
				this._IDSupplier = value;
				this.SendPropertyChanged("IDSupplier");
				this.OnIDSupplierChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="Date NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="Date NOT NULL")]
	public System.DateTime DeliveryDate
	{
		get
		{
			return this._DeliveryDate;
		}
		set
		{
			if ((this._DeliveryDate != value))
			{
				this.OnDeliveryDateChanging(value);
				this.SendPropertyChanging();
				this._DeliveryDate = value;
				this.SendPropertyChanged("DeliveryDate");
				this.OnDeliveryDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Float NOT NULL")]
	public double TotalPrice
	{
		get
		{
			return this._TotalPrice;
		}
		set
		{
			if ((this._TotalPrice != value))
			{
				this.OnTotalPriceChanging(value);
				this.SendPropertyChanging();
				this._TotalPrice = value;
				this.SendPropertyChanged("TotalPrice");
				this.OnTotalPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippingFee", DbType="Float NOT NULL")]
	public double ShippingFee
	{
		get
		{
			return this._ShippingFee;
		}
		set
		{
			if ((this._ShippingFee != value))
			{
				this.OnShippingFeeChanging(value);
				this.SendPropertyChanging();
				this._ShippingFee = value;
				this.SendPropertyChanged("ShippingFee");
				this.OnShippingFeeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbBuyingHistory_tbBuyingHistoryDetail", Storage="_tbBuyingHistoryDetail", ThisKey="IDBuyingHistory", OtherKey="IDBuyingHistory")]
	public EntitySet<tbBuyingHistoryDetail> tbBuyingHistoryDetail
	{
		get
		{
			return this._tbBuyingHistoryDetail;
		}
		set
		{
			this._tbBuyingHistoryDetail.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSupplier_tbBuyingHistory", Storage="_tbSupplier", ThisKey="IDSupplier", OtherKey="IDSupplier", IsForeignKey=true)]
	public tbSupplier tbSupplier
	{
		get
		{
			return this._tbSupplier.Entity;
		}
		set
		{
			tbSupplier previousValue = this._tbSupplier.Entity;
			if (((previousValue != value) 
						|| (this._tbSupplier.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbSupplier.Entity = null;
					previousValue.tbBuyingHistory.Remove(this);
				}
				this._tbSupplier.Entity = value;
				if ((value != null))
				{
					value.tbBuyingHistory.Add(this);
					this._IDSupplier = value.IDSupplier;
				}
				else
				{
					this._IDSupplier = default(int);
				}
				this.SendPropertyChanged("tbSupplier");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbBuyingHistoryDetail(tbBuyingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbBuyingHistory = this;
	}
	
	private void detach_tbBuyingHistoryDetail(tbBuyingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbBuyingHistory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbBuyingHistoryDetail")]
public partial class tbBuyingHistoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDBuyingHistory;
	
	private int _IDProduct;
	
	private int _Quantity;
	
	private EntityRef<tbBuyingHistory> _tbBuyingHistory;
	
	private EntityRef<tbProduct> _tbProduct;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBuyingHistoryChanging(int value);
    partial void OnIDBuyingHistoryChanged();
    partial void OnIDProductChanging(int value);
    partial void OnIDProductChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
	
	public tbBuyingHistoryDetail()
	{
		this._tbBuyingHistory = default(EntityRef<tbBuyingHistory>);
		this._tbProduct = default(EntityRef<tbProduct>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBuyingHistory", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IDBuyingHistory
	{
		get
		{
			return this._IDBuyingHistory;
		}
		set
		{
			if ((this._IDBuyingHistory != value))
			{
				if (this._tbBuyingHistory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDBuyingHistoryChanging(value);
				this.SendPropertyChanging();
				this._IDBuyingHistory = value;
				this.SendPropertyChanged("IDBuyingHistory");
				this.OnIDBuyingHistoryChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IDProduct
	{
		get
		{
			return this._IDProduct;
		}
		set
		{
			if ((this._IDProduct != value))
			{
				if (this._tbProduct.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDProductChanging(value);
				this.SendPropertyChanging();
				this._IDProduct = value;
				this.SendPropertyChanged("IDProduct");
				this.OnIDProductChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbBuyingHistory_tbBuyingHistoryDetail", Storage="_tbBuyingHistory", ThisKey="IDBuyingHistory", OtherKey="IDBuyingHistory", IsForeignKey=true)]
	public tbBuyingHistory tbBuyingHistory
	{
		get
		{
			return this._tbBuyingHistory.Entity;
		}
		set
		{
			tbBuyingHistory previousValue = this._tbBuyingHistory.Entity;
			if (((previousValue != value) 
						|| (this._tbBuyingHistory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbBuyingHistory.Entity = null;
					previousValue.tbBuyingHistoryDetail.Remove(this);
				}
				this._tbBuyingHistory.Entity = value;
				if ((value != null))
				{
					value.tbBuyingHistoryDetail.Add(this);
					this._IDBuyingHistory = value.IDBuyingHistory;
				}
				else
				{
					this._IDBuyingHistory = default(int);
				}
				this.SendPropertyChanged("tbBuyingHistory");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbBuyingHistoryDetail", Storage="_tbProduct", ThisKey="IDProduct", OtherKey="IDProduct", IsForeignKey=true)]
	public tbProduct tbProduct
	{
		get
		{
			return this._tbProduct.Entity;
		}
		set
		{
			tbProduct previousValue = this._tbProduct.Entity;
			if (((previousValue != value) 
						|| (this._tbProduct.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbProduct.Entity = null;
					previousValue.tbBuyingHistoryDetail.Remove(this);
				}
				this._tbProduct.Entity = value;
				if ((value != null))
				{
					value.tbBuyingHistoryDetail.Add(this);
					this._IDProduct = value.IDProduct;
				}
				else
				{
					this._IDProduct = default(int);
				}
				this.SendPropertyChanged("tbProduct");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbCustomer")]
public partial class tbCustomer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDCustomer;
	
	private string _CustomerCode;
	
	private string _Name;
	
	private string _Address;
	
	private string _Tel;
	
	private string _Fax;
	
	private string _TaxNumber;
	
	private EntitySet<tbCustomerContact> _tbCustomerContact;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(int value);
    partial void OnIDCustomerChanged();
    partial void OnCustomerCodeChanging(string value);
    partial void OnCustomerCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnTaxNumberChanging(string value);
    partial void OnTaxNumberChanged();
    #endregion
	
	public tbCustomer()
	{
		this._tbCustomerContact = new EntitySet<tbCustomerContact>(new Action<tbCustomerContact>(this.attach_tbCustomerContact), new Action<tbCustomerContact>(this.detach_tbCustomerContact));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDCustomer
	{
		get
		{
			return this._IDCustomer;
		}
		set
		{
			if ((this._IDCustomer != value))
			{
				this.OnIDCustomerChanging(value);
				this.SendPropertyChanging();
				this._IDCustomer = value;
				this.SendPropertyChanged("IDCustomer");
				this.OnIDCustomerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string CustomerCode
	{
		get
		{
			return this._CustomerCode;
		}
		set
		{
			if ((this._CustomerCode != value))
			{
				this.OnCustomerCodeChanging(value);
				this.SendPropertyChanging();
				this._CustomerCode = value;
				this.SendPropertyChanged("CustomerCode");
				this.OnCustomerCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(20)")]
	public string Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(20)")]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxNumber", DbType="VarChar(50)")]
	public string TaxNumber
	{
		get
		{
			return this._TaxNumber;
		}
		set
		{
			if ((this._TaxNumber != value))
			{
				this.OnTaxNumberChanging(value);
				this.SendPropertyChanging();
				this._TaxNumber = value;
				this.SendPropertyChanged("TaxNumber");
				this.OnTaxNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbCustomer_tbCustomerContact", Storage="_tbCustomerContact", ThisKey="IDCustomer", OtherKey="IDCustomer")]
	public EntitySet<tbCustomerContact> tbCustomerContact
	{
		get
		{
			return this._tbCustomerContact;
		}
		set
		{
			this._tbCustomerContact.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbCustomerContact(tbCustomerContact entity)
	{
		this.SendPropertyChanging();
		entity.tbCustomer = this;
	}
	
	private void detach_tbCustomerContact(tbCustomerContact entity)
	{
		this.SendPropertyChanging();
		entity.tbCustomer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbCustomerContact")]
public partial class tbCustomerContact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDCustomerContact;
	
	private int _IDCustomer;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Title;
	
	private string _Position;
	
	private string _Tel;
	
	private string _Email;
	
	private int _Commission;
	
	private EntitySet<tbSellingHistory> _tbSellingHistory;
	
	private EntityRef<tbCustomer> _tbCustomer;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerContactChanging(int value);
    partial void OnIDCustomerContactChanged();
    partial void OnIDCustomerChanging(int value);
    partial void OnIDCustomerChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCommissionChanging(int value);
    partial void OnCommissionChanged();
    #endregion
	
	public tbCustomerContact()
	{
		this._tbSellingHistory = new EntitySet<tbSellingHistory>(new Action<tbSellingHistory>(this.attach_tbSellingHistory), new Action<tbSellingHistory>(this.detach_tbSellingHistory));
		this._tbCustomer = default(EntityRef<tbCustomer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerContact", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDCustomerContact
	{
		get
		{
			return this._IDCustomerContact;
		}
		set
		{
			if ((this._IDCustomerContact != value))
			{
				this.OnIDCustomerContactChanging(value);
				this.SendPropertyChanging();
				this._IDCustomerContact = value;
				this.SendPropertyChanged("IDCustomerContact");
				this.OnIDCustomerContactChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="Int NOT NULL")]
	public int IDCustomer
	{
		get
		{
			return this._IDCustomer;
		}
		set
		{
			if ((this._IDCustomer != value))
			{
				if (this._tbCustomer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDCustomerChanging(value);
				this.SendPropertyChanging();
				this._IDCustomer = value;
				this.SendPropertyChanged("IDCustomer");
				this.OnIDCustomerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
	public string Position
	{
		get
		{
			return this._Position;
		}
		set
		{
			if ((this._Position != value))
			{
				this.OnPositionChanging(value);
				this.SendPropertyChanging();
				this._Position = value;
				this.SendPropertyChanged("Position");
				this.OnPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(20)")]
	public string Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commission", DbType="Int NOT NULL")]
	public int Commission
	{
		get
		{
			return this._Commission;
		}
		set
		{
			if ((this._Commission != value))
			{
				this.OnCommissionChanging(value);
				this.SendPropertyChanging();
				this._Commission = value;
				this.SendPropertyChanged("Commission");
				this.OnCommissionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbCustomerContact_tbSellingHistory", Storage="_tbSellingHistory", ThisKey="IDCustomerContact", OtherKey="IDCustomerContact")]
	public EntitySet<tbSellingHistory> tbSellingHistory
	{
		get
		{
			return this._tbSellingHistory;
		}
		set
		{
			this._tbSellingHistory.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbCustomer_tbCustomerContact", Storage="_tbCustomer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
	public tbCustomer tbCustomer
	{
		get
		{
			return this._tbCustomer.Entity;
		}
		set
		{
			tbCustomer previousValue = this._tbCustomer.Entity;
			if (((previousValue != value) 
						|| (this._tbCustomer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbCustomer.Entity = null;
					previousValue.tbCustomerContact.Remove(this);
				}
				this._tbCustomer.Entity = value;
				if ((value != null))
				{
					value.tbCustomerContact.Add(this);
					this._IDCustomer = value.IDCustomer;
				}
				else
				{
					this._IDCustomer = default(int);
				}
				this.SendPropertyChanged("tbCustomer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbSellingHistory(tbSellingHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbCustomerContact = this;
	}
	
	private void detach_tbSellingHistory(tbSellingHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbCustomerContact = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbLogin")]
public partial class tbLogin : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _Username;
	
	private string _Password;
	
	private int _IDStaff;
	
	private int _Role;
	
	private EntityRef<tbStaff> _tbStaff;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIDStaffChanging(int value);
    partial void OnIDStaffChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    #endregion
	
	public tbLogin()
	{
		this._tbStaff = default(EntityRef<tbStaff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(40) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStaff", DbType="Int NOT NULL")]
	public int IDStaff
	{
		get
		{
			return this._IDStaff;
		}
		set
		{
			if ((this._IDStaff != value))
			{
				if (this._tbStaff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDStaffChanging(value);
				this.SendPropertyChanging();
				this._IDStaff = value;
				this.SendPropertyChanged("IDStaff");
				this.OnIDStaffChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
	public int Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this.OnRoleChanging(value);
				this.SendPropertyChanging();
				this._Role = value;
				this.SendPropertyChanged("Role");
				this.OnRoleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbLogin", Storage="_tbStaff", ThisKey="IDStaff", OtherKey="IDStaff", IsForeignKey=true)]
	public tbStaff tbStaff
	{
		get
		{
			return this._tbStaff.Entity;
		}
		set
		{
			tbStaff previousValue = this._tbStaff.Entity;
			if (((previousValue != value) 
						|| (this._tbStaff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbStaff.Entity = null;
					previousValue.tbLogin.Remove(this);
				}
				this._tbStaff.Entity = value;
				if ((value != null))
				{
					value.tbLogin.Add(this);
					this._IDStaff = value.IDStaff;
				}
				else
				{
					this._IDStaff = default(int);
				}
				this.SendPropertyChanged("tbStaff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbPriceHistory")]
public partial class tbPriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDProduct;
	
	private System.DateTime _ChangeDate;
	
	private double _FromPrice;
	
	private double _ToPrice;
	
	private int _IDStaff;
	
	private EntityRef<tbProduct> _tbProduct;
	
	private EntityRef<tbStaff> _tbStaff;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDProductChanging(int value);
    partial void OnIDProductChanged();
    partial void OnChangeDateChanging(System.DateTime value);
    partial void OnChangeDateChanged();
    partial void OnFromPriceChanging(double value);
    partial void OnFromPriceChanged();
    partial void OnToPriceChanging(double value);
    partial void OnToPriceChanged();
    partial void OnIDStaffChanging(int value);
    partial void OnIDStaffChanged();
    #endregion
	
	public tbPriceHistory()
	{
		this._tbProduct = default(EntityRef<tbProduct>);
		this._tbStaff = default(EntityRef<tbStaff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDProduct
	{
		get
		{
			return this._IDProduct;
		}
		set
		{
			if ((this._IDProduct != value))
			{
				if (this._tbProduct.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDProductChanging(value);
				this.SendPropertyChanging();
				this._IDProduct = value;
				this.SendPropertyChanged("IDProduct");
				this.OnIDProductChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDate", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
	public System.DateTime ChangeDate
	{
		get
		{
			return this._ChangeDate;
		}
		set
		{
			if ((this._ChangeDate != value))
			{
				this.OnChangeDateChanging(value);
				this.SendPropertyChanging();
				this._ChangeDate = value;
				this.SendPropertyChanged("ChangeDate");
				this.OnChangeDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromPrice", DbType="Float NOT NULL")]
	public double FromPrice
	{
		get
		{
			return this._FromPrice;
		}
		set
		{
			if ((this._FromPrice != value))
			{
				this.OnFromPriceChanging(value);
				this.SendPropertyChanging();
				this._FromPrice = value;
				this.SendPropertyChanged("FromPrice");
				this.OnFromPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToPrice", DbType="Float NOT NULL")]
	public double ToPrice
	{
		get
		{
			return this._ToPrice;
		}
		set
		{
			if ((this._ToPrice != value))
			{
				this.OnToPriceChanging(value);
				this.SendPropertyChanging();
				this._ToPrice = value;
				this.SendPropertyChanged("ToPrice");
				this.OnToPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStaff", DbType="Int NOT NULL")]
	public int IDStaff
	{
		get
		{
			return this._IDStaff;
		}
		set
		{
			if ((this._IDStaff != value))
			{
				if (this._tbStaff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDStaffChanging(value);
				this.SendPropertyChanging();
				this._IDStaff = value;
				this.SendPropertyChanged("IDStaff");
				this.OnIDStaffChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbPriceHistory", Storage="_tbProduct", ThisKey="IDProduct", OtherKey="IDProduct", IsForeignKey=true)]
	public tbProduct tbProduct
	{
		get
		{
			return this._tbProduct.Entity;
		}
		set
		{
			tbProduct previousValue = this._tbProduct.Entity;
			if (((previousValue != value) 
						|| (this._tbProduct.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbProduct.Entity = null;
					previousValue.tbPriceHistory.Remove(this);
				}
				this._tbProduct.Entity = value;
				if ((value != null))
				{
					value.tbPriceHistory.Add(this);
					this._IDProduct = value.IDProduct;
				}
				else
				{
					this._IDProduct = default(int);
				}
				this.SendPropertyChanged("tbProduct");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbPriceHistory", Storage="_tbStaff", ThisKey="IDStaff", OtherKey="IDStaff", IsForeignKey=true)]
	public tbStaff tbStaff
	{
		get
		{
			return this._tbStaff.Entity;
		}
		set
		{
			tbStaff previousValue = this._tbStaff.Entity;
			if (((previousValue != value) 
						|| (this._tbStaff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbStaff.Entity = null;
					previousValue.tbPriceHistory.Remove(this);
				}
				this._tbStaff.Entity = value;
				if ((value != null))
				{
					value.tbPriceHistory.Add(this);
					this._IDStaff = value.IDStaff;
				}
				else
				{
					this._IDStaff = default(int);
				}
				this.SendPropertyChanged("tbStaff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProduct")]
public partial class tbProduct : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDProduct;
	
	private int _IDBrand;
	
	private int _IDProductType;
	
	private string _Model;
	
	private string _Specification;
	
	private string _Image1;
	
	private string _Image2;
	
	private string _Image3;
	
	private double _Price;
	
	private double _Discount;
	
	private int _AvailableNumber;
	
	private EntitySet<tbSupply> _tbSupply;
	
	private EntitySet<tbBuyingHistoryDetail> _tbBuyingHistoryDetail;
	
	private EntitySet<tbPriceHistory> _tbPriceHistory;
	
	private EntitySet<tbSellingHistoryDetail> _tbSellingHistoryDetail;
	
	private EntityRef<tbBrand> _tbBrand;
	
	private EntityRef<tbProductType> _tbProductType;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDProductChanging(int value);
    partial void OnIDProductChanged();
    partial void OnIDBrandChanging(int value);
    partial void OnIDBrandChanged();
    partial void OnIDProductTypeChanging(int value);
    partial void OnIDProductTypeChanged();
    partial void OnModelChanging(string value);
    partial void OnModelChanged();
    partial void OnSpecificationChanging(string value);
    partial void OnSpecificationChanged();
    partial void OnImage1Changing(string value);
    partial void OnImage1Changed();
    partial void OnImage2Changing(string value);
    partial void OnImage2Changed();
    partial void OnImage3Changing(string value);
    partial void OnImage3Changed();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnDiscountChanging(double value);
    partial void OnDiscountChanged();
    partial void OnAvailableNumberChanging(int value);
    partial void OnAvailableNumberChanged();
    #endregion
	
	public tbProduct()
	{
		this._tbSupply = new EntitySet<tbSupply>(new Action<tbSupply>(this.attach_tbSupply), new Action<tbSupply>(this.detach_tbSupply));
		this._tbBuyingHistoryDetail = new EntitySet<tbBuyingHistoryDetail>(new Action<tbBuyingHistoryDetail>(this.attach_tbBuyingHistoryDetail), new Action<tbBuyingHistoryDetail>(this.detach_tbBuyingHistoryDetail));
		this._tbPriceHistory = new EntitySet<tbPriceHistory>(new Action<tbPriceHistory>(this.attach_tbPriceHistory), new Action<tbPriceHistory>(this.detach_tbPriceHistory));
		this._tbSellingHistoryDetail = new EntitySet<tbSellingHistoryDetail>(new Action<tbSellingHistoryDetail>(this.attach_tbSellingHistoryDetail), new Action<tbSellingHistoryDetail>(this.detach_tbSellingHistoryDetail));
		this._tbBrand = default(EntityRef<tbBrand>);
		this._tbProductType = default(EntityRef<tbProductType>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDProduct
	{
		get
		{
			return this._IDProduct;
		}
		set
		{
			if ((this._IDProduct != value))
			{
				this.OnIDProductChanging(value);
				this.SendPropertyChanging();
				this._IDProduct = value;
				this.SendPropertyChanged("IDProduct");
				this.OnIDProductChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBrand", DbType="Int NOT NULL")]
	public int IDBrand
	{
		get
		{
			return this._IDBrand;
		}
		set
		{
			if ((this._IDBrand != value))
			{
				if (this._tbBrand.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDBrandChanging(value);
				this.SendPropertyChanging();
				this._IDBrand = value;
				this.SendPropertyChanged("IDBrand");
				this.OnIDBrandChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProductType", DbType="Int NOT NULL")]
	public int IDProductType
	{
		get
		{
			return this._IDProductType;
		}
		set
		{
			if ((this._IDProductType != value))
			{
				if (this._tbProductType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDProductTypeChanging(value);
				this.SendPropertyChanging();
				this._IDProductType = value;
				this.SendPropertyChanged("IDProductType");
				this.OnIDProductTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Model", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Model
	{
		get
		{
			return this._Model;
		}
		set
		{
			if ((this._Model != value))
			{
				this.OnModelChanging(value);
				this.SendPropertyChanging();
				this._Model = value;
				this.SendPropertyChanged("Model");
				this.OnModelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specification", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Specification
	{
		get
		{
			return this._Specification;
		}
		set
		{
			if ((this._Specification != value))
			{
				this.OnSpecificationChanging(value);
				this.SendPropertyChanging();
				this._Specification = value;
				this.SendPropertyChanged("Specification");
				this.OnSpecificationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image1", DbType="NVarChar(MAX)")]
	public string Image1
	{
		get
		{
			return this._Image1;
		}
		set
		{
			if ((this._Image1 != value))
			{
				this.OnImage1Changing(value);
				this.SendPropertyChanging();
				this._Image1 = value;
				this.SendPropertyChanged("Image1");
				this.OnImage1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image2", DbType="NVarChar(MAX)")]
	public string Image2
	{
		get
		{
			return this._Image2;
		}
		set
		{
			if ((this._Image2 != value))
			{
				this.OnImage2Changing(value);
				this.SendPropertyChanging();
				this._Image2 = value;
				this.SendPropertyChanged("Image2");
				this.OnImage2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image3", DbType="NVarChar(MAX)")]
	public string Image3
	{
		get
		{
			return this._Image3;
		}
		set
		{
			if ((this._Image3 != value))
			{
				this.OnImage3Changing(value);
				this.SendPropertyChanging();
				this._Image3 = value;
				this.SendPropertyChanged("Image3");
				this.OnImage3Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
	public double Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float NOT NULL")]
	public double Discount
	{
		get
		{
			return this._Discount;
		}
		set
		{
			if ((this._Discount != value))
			{
				this.OnDiscountChanging(value);
				this.SendPropertyChanging();
				this._Discount = value;
				this.SendPropertyChanged("Discount");
				this.OnDiscountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableNumber", DbType="Int NOT NULL")]
	public int AvailableNumber
	{
		get
		{
			return this._AvailableNumber;
		}
		set
		{
			if ((this._AvailableNumber != value))
			{
				this.OnAvailableNumberChanging(value);
				this.SendPropertyChanging();
				this._AvailableNumber = value;
				this.SendPropertyChanged("AvailableNumber");
				this.OnAvailableNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbSupply", Storage="_tbSupply", ThisKey="IDProduct", OtherKey="IDProduct")]
	public EntitySet<tbSupply> tbSupply
	{
		get
		{
			return this._tbSupply;
		}
		set
		{
			this._tbSupply.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbBuyingHistoryDetail", Storage="_tbBuyingHistoryDetail", ThisKey="IDProduct", OtherKey="IDProduct")]
	public EntitySet<tbBuyingHistoryDetail> tbBuyingHistoryDetail
	{
		get
		{
			return this._tbBuyingHistoryDetail;
		}
		set
		{
			this._tbBuyingHistoryDetail.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbPriceHistory", Storage="_tbPriceHistory", ThisKey="IDProduct", OtherKey="IDProduct")]
	public EntitySet<tbPriceHistory> tbPriceHistory
	{
		get
		{
			return this._tbPriceHistory;
		}
		set
		{
			this._tbPriceHistory.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbSellingHistoryDetail", Storage="_tbSellingHistoryDetail", ThisKey="IDProduct", OtherKey="IDProduct")]
	public EntitySet<tbSellingHistoryDetail> tbSellingHistoryDetail
	{
		get
		{
			return this._tbSellingHistoryDetail;
		}
		set
		{
			this._tbSellingHistoryDetail.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbBrand_tbProduct", Storage="_tbBrand", ThisKey="IDBrand", OtherKey="IDBrand", IsForeignKey=true)]
	public tbBrand tbBrand
	{
		get
		{
			return this._tbBrand.Entity;
		}
		set
		{
			tbBrand previousValue = this._tbBrand.Entity;
			if (((previousValue != value) 
						|| (this._tbBrand.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbBrand.Entity = null;
					previousValue.tbProduct.Remove(this);
				}
				this._tbBrand.Entity = value;
				if ((value != null))
				{
					value.tbProduct.Add(this);
					this._IDBrand = value.IDBrand;
				}
				else
				{
					this._IDBrand = default(int);
				}
				this.SendPropertyChanged("tbBrand");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductType_tbProduct", Storage="_tbProductType", ThisKey="IDProductType", OtherKey="IDProductType", IsForeignKey=true)]
	public tbProductType tbProductType
	{
		get
		{
			return this._tbProductType.Entity;
		}
		set
		{
			tbProductType previousValue = this._tbProductType.Entity;
			if (((previousValue != value) 
						|| (this._tbProductType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbProductType.Entity = null;
					previousValue.tbProduct.Remove(this);
				}
				this._tbProductType.Entity = value;
				if ((value != null))
				{
					value.tbProduct.Add(this);
					this._IDProductType = value.IDProductType;
				}
				else
				{
					this._IDProductType = default(int);
				}
				this.SendPropertyChanged("tbProductType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbSupply(tbSupply entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = this;
	}
	
	private void detach_tbSupply(tbSupply entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = null;
	}
	
	private void attach_tbBuyingHistoryDetail(tbBuyingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = this;
	}
	
	private void detach_tbBuyingHistoryDetail(tbBuyingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = null;
	}
	
	private void attach_tbPriceHistory(tbPriceHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = this;
	}
	
	private void detach_tbPriceHistory(tbPriceHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = null;
	}
	
	private void attach_tbSellingHistoryDetail(tbSellingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = this;
	}
	
	private void detach_tbSellingHistoryDetail(tbSellingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbProduct = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProductGroup")]
public partial class tbProductGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDGroup;
	
	private string _Name;
	
	private EntitySet<tbProductType> _tbProductType;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDGroupChanging(int value);
    partial void OnIDGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public tbProductGroup()
	{
		this._tbProductType = new EntitySet<tbProductType>(new Action<tbProductType>(this.attach_tbProductType), new Action<tbProductType>(this.detach_tbProductType));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDGroup
	{
		get
		{
			return this._IDGroup;
		}
		set
		{
			if ((this._IDGroup != value))
			{
				this.OnIDGroupChanging(value);
				this.SendPropertyChanging();
				this._IDGroup = value;
				this.SendPropertyChanged("IDGroup");
				this.OnIDGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductGroup_tbProductType", Storage="_tbProductType", ThisKey="IDGroup", OtherKey="IDGroup")]
	public EntitySet<tbProductType> tbProductType
	{
		get
		{
			return this._tbProductType;
		}
		set
		{
			this._tbProductType.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbProductType(tbProductType entity)
	{
		this.SendPropertyChanging();
		entity.tbProductGroup = this;
	}
	
	private void detach_tbProductType(tbProductType entity)
	{
		this.SendPropertyChanging();
		entity.tbProductGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbProductType")]
public partial class tbProductType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDProductType;
	
	private int _IDGroup;
	
	private string _Name;
	
	private EntitySet<tbProduct> _tbProduct;
	
	private EntityRef<tbProductGroup> _tbProductGroup;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDProductTypeChanging(int value);
    partial void OnIDProductTypeChanged();
    partial void OnIDGroupChanging(int value);
    partial void OnIDGroupChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public tbProductType()
	{
		this._tbProduct = new EntitySet<tbProduct>(new Action<tbProduct>(this.attach_tbProduct), new Action<tbProduct>(this.detach_tbProduct));
		this._tbProductGroup = default(EntityRef<tbProductGroup>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProductType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDProductType
	{
		get
		{
			return this._IDProductType;
		}
		set
		{
			if ((this._IDProductType != value))
			{
				this.OnIDProductTypeChanging(value);
				this.SendPropertyChanging();
				this._IDProductType = value;
				this.SendPropertyChanged("IDProductType");
				this.OnIDProductTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDGroup", DbType="Int NOT NULL")]
	public int IDGroup
	{
		get
		{
			return this._IDGroup;
		}
		set
		{
			if ((this._IDGroup != value))
			{
				if (this._tbProductGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDGroupChanging(value);
				this.SendPropertyChanging();
				this._IDGroup = value;
				this.SendPropertyChanged("IDGroup");
				this.OnIDGroupChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductType_tbProduct", Storage="_tbProduct", ThisKey="IDProductType", OtherKey="IDProductType")]
	public EntitySet<tbProduct> tbProduct
	{
		get
		{
			return this._tbProduct;
		}
		set
		{
			this._tbProduct.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProductGroup_tbProductType", Storage="_tbProductGroup", ThisKey="IDGroup", OtherKey="IDGroup", IsForeignKey=true)]
	public tbProductGroup tbProductGroup
	{
		get
		{
			return this._tbProductGroup.Entity;
		}
		set
		{
			tbProductGroup previousValue = this._tbProductGroup.Entity;
			if (((previousValue != value) 
						|| (this._tbProductGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbProductGroup.Entity = null;
					previousValue.tbProductType.Remove(this);
				}
				this._tbProductGroup.Entity = value;
				if ((value != null))
				{
					value.tbProductType.Add(this);
					this._IDGroup = value.IDGroup;
				}
				else
				{
					this._IDGroup = default(int);
				}
				this.SendPropertyChanged("tbProductGroup");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbProduct(tbProduct entity)
	{
		this.SendPropertyChanging();
		entity.tbProductType = this;
	}
	
	private void detach_tbProduct(tbProduct entity)
	{
		this.SendPropertyChanging();
		entity.tbProductType = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbSellingHistory")]
public partial class tbSellingHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _OrderNo;
	
	private int _IDCustomerContact;
	
	private int _IDStaff;
	
	private System.DateTime _OrderDate;
	
	private System.Nullable<System.DateTime> _DeliveryDate;
	
	private string _Terms;
	
	private string _OrderName;
	
	private int _IsHidden;
	
	private EntitySet<tbSellingHistoryDetail> _tbSellingHistoryDetail;
	
	private EntitySet<tbQuotation> _tbQuotation;
	
	private EntityRef<tbCustomerContact> _tbCustomerContact;
	
	private EntityRef<tbStaff> _tbStaff;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderNoChanging(string value);
    partial void OnOrderNoChanged();
    partial void OnIDCustomerContactChanging(int value);
    partial void OnIDCustomerContactChanged();
    partial void OnIDStaffChanging(int value);
    partial void OnIDStaffChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnTermsChanging(string value);
    partial void OnTermsChanged();
    partial void OnOrderNameChanging(string value);
    partial void OnOrderNameChanged();
    partial void OnIsHiddenChanging(int value);
    partial void OnIsHiddenChanged();
    #endregion
	
	public tbSellingHistory()
	{
		this._tbSellingHistoryDetail = new EntitySet<tbSellingHistoryDetail>(new Action<tbSellingHistoryDetail>(this.attach_tbSellingHistoryDetail), new Action<tbSellingHistoryDetail>(this.detach_tbSellingHistoryDetail));
		this._tbQuotation = new EntitySet<tbQuotation>(new Action<tbQuotation>(this.attach_tbQuotation), new Action<tbQuotation>(this.detach_tbQuotation));
		this._tbCustomerContact = default(EntityRef<tbCustomerContact>);
		this._tbStaff = default(EntityRef<tbStaff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string OrderNo
	{
		get
		{
			return this._OrderNo;
		}
		set
		{
			if ((this._OrderNo != value))
			{
				this.OnOrderNoChanging(value);
				this.SendPropertyChanging();
				this._OrderNo = value;
				this.SendPropertyChanged("OrderNo");
				this.OnOrderNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerContact", DbType="Int NOT NULL")]
	public int IDCustomerContact
	{
		get
		{
			return this._IDCustomerContact;
		}
		set
		{
			if ((this._IDCustomerContact != value))
			{
				if (this._tbCustomerContact.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDCustomerContactChanging(value);
				this.SendPropertyChanging();
				this._IDCustomerContact = value;
				this.SendPropertyChanged("IDCustomerContact");
				this.OnIDCustomerContactChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStaff", DbType="Int NOT NULL")]
	public int IDStaff
	{
		get
		{
			return this._IDStaff;
		}
		set
		{
			if ((this._IDStaff != value))
			{
				if (this._tbStaff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDStaffChanging(value);
				this.SendPropertyChanging();
				this._IDStaff = value;
				this.SendPropertyChanged("IDStaff");
				this.OnIDStaffChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
	public System.DateTime OrderDate
	{
		get
		{
			return this._OrderDate;
		}
		set
		{
			if ((this._OrderDate != value))
			{
				this.OnOrderDateChanging(value);
				this.SendPropertyChanging();
				this._OrderDate = value;
				this.SendPropertyChanged("OrderDate");
				this.OnOrderDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="Date")]
	public System.Nullable<System.DateTime> DeliveryDate
	{
		get
		{
			return this._DeliveryDate;
		}
		set
		{
			if ((this._DeliveryDate != value))
			{
				this.OnDeliveryDateChanging(value);
				this.SendPropertyChanging();
				this._DeliveryDate = value;
				this.SendPropertyChanged("DeliveryDate");
				this.OnDeliveryDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Terms
	{
		get
		{
			return this._Terms;
		}
		set
		{
			if ((this._Terms != value))
			{
				this.OnTermsChanging(value);
				this.SendPropertyChanging();
				this._Terms = value;
				this.SendPropertyChanged("Terms");
				this.OnTermsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderName", DbType="NVarChar(50)")]
	public string OrderName
	{
		get
		{
			return this._OrderName;
		}
		set
		{
			if ((this._OrderName != value))
			{
				this.OnOrderNameChanging(value);
				this.SendPropertyChanging();
				this._OrderName = value;
				this.SendPropertyChanged("OrderName");
				this.OnOrderNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Int NOT NULL")]
	public int IsHidden
	{
		get
		{
			return this._IsHidden;
		}
		set
		{
			if ((this._IsHidden != value))
			{
				this.OnIsHiddenChanging(value);
				this.SendPropertyChanging();
				this._IsHidden = value;
				this.SendPropertyChanged("IsHidden");
				this.OnIsHiddenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSellingHistory_tbSellingHistoryDetail", Storage="_tbSellingHistoryDetail", ThisKey="OrderNo", OtherKey="OrderNo")]
	public EntitySet<tbSellingHistoryDetail> tbSellingHistoryDetail
	{
		get
		{
			return this._tbSellingHistoryDetail;
		}
		set
		{
			this._tbSellingHistoryDetail.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSellingHistory_tbQuotation", Storage="_tbQuotation", ThisKey="OrderNo", OtherKey="OrderNo")]
	public EntitySet<tbQuotation> tbQuotation
	{
		get
		{
			return this._tbQuotation;
		}
		set
		{
			this._tbQuotation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbCustomerContact_tbSellingHistory", Storage="_tbCustomerContact", ThisKey="IDCustomerContact", OtherKey="IDCustomerContact", IsForeignKey=true)]
	public tbCustomerContact tbCustomerContact
	{
		get
		{
			return this._tbCustomerContact.Entity;
		}
		set
		{
			tbCustomerContact previousValue = this._tbCustomerContact.Entity;
			if (((previousValue != value) 
						|| (this._tbCustomerContact.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbCustomerContact.Entity = null;
					previousValue.tbSellingHistory.Remove(this);
				}
				this._tbCustomerContact.Entity = value;
				if ((value != null))
				{
					value.tbSellingHistory.Add(this);
					this._IDCustomerContact = value.IDCustomerContact;
				}
				else
				{
					this._IDCustomerContact = default(int);
				}
				this.SendPropertyChanged("tbCustomerContact");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbSellingHistory", Storage="_tbStaff", ThisKey="IDStaff", OtherKey="IDStaff", IsForeignKey=true)]
	public tbStaff tbStaff
	{
		get
		{
			return this._tbStaff.Entity;
		}
		set
		{
			tbStaff previousValue = this._tbStaff.Entity;
			if (((previousValue != value) 
						|| (this._tbStaff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbStaff.Entity = null;
					previousValue.tbSellingHistory.Remove(this);
				}
				this._tbStaff.Entity = value;
				if ((value != null))
				{
					value.tbSellingHistory.Add(this);
					this._IDStaff = value.IDStaff;
				}
				else
				{
					this._IDStaff = default(int);
				}
				this.SendPropertyChanged("tbStaff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbSellingHistoryDetail(tbSellingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbSellingHistory = this;
	}
	
	private void detach_tbSellingHistoryDetail(tbSellingHistoryDetail entity)
	{
		this.SendPropertyChanging();
		entity.tbSellingHistory = null;
	}
	
	private void attach_tbQuotation(tbQuotation entity)
	{
		this.SendPropertyChanging();
		entity.tbSellingHistory = this;
	}
	
	private void detach_tbQuotation(tbQuotation entity)
	{
		this.SendPropertyChanging();
		entity.tbSellingHistory = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbSellingHistoryDetail")]
public partial class tbSellingHistoryDetail : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _OrderNo;
	
	private int _IDProduct;
	
	private int _Quantity;
	
	private double _Scale;
	
	private string _Note;
	
	private int _No;
	
	private EntityRef<tbProduct> _tbProduct;
	
	private EntityRef<tbSellingHistory> _tbSellingHistory;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderNoChanging(string value);
    partial void OnOrderNoChanged();
    partial void OnIDProductChanging(int value);
    partial void OnIDProductChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnScaleChanging(double value);
    partial void OnScaleChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnNoChanging(int value);
    partial void OnNoChanged();
    #endregion
	
	public tbSellingHistoryDetail()
	{
		this._tbProduct = default(EntityRef<tbProduct>);
		this._tbSellingHistory = default(EntityRef<tbSellingHistory>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string OrderNo
	{
		get
		{
			return this._OrderNo;
		}
		set
		{
			if ((this._OrderNo != value))
			{
				if (this._tbSellingHistory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderNoChanging(value);
				this.SendPropertyChanging();
				this._OrderNo = value;
				this.SendPropertyChanged("OrderNo");
				this.OnOrderNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDProduct", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IDProduct
	{
		get
		{
			return this._IDProduct;
		}
		set
		{
			if ((this._IDProduct != value))
			{
				if (this._tbProduct.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDProductChanging(value);
				this.SendPropertyChanging();
				this._IDProduct = value;
				this.SendPropertyChanged("IDProduct");
				this.OnIDProductChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
	public int Quantity
	{
		get
		{
			return this._Quantity;
		}
		set
		{
			if ((this._Quantity != value))
			{
				this.OnQuantityChanging(value);
				this.SendPropertyChanging();
				this._Quantity = value;
				this.SendPropertyChanged("Quantity");
				this.OnQuantityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scale", DbType="Float NOT NULL")]
	public double Scale
	{
		get
		{
			return this._Scale;
		}
		set
		{
			if ((this._Scale != value))
			{
				this.OnScaleChanging(value);
				this.SendPropertyChanging();
				this._Scale = value;
				this.SendPropertyChanged("Scale");
				this.OnScaleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Note
	{
		get
		{
			return this._Note;
		}
		set
		{
			if ((this._Note != value))
			{
				this.OnNoteChanging(value);
				this.SendPropertyChanging();
				this._Note = value;
				this.SendPropertyChanged("Note");
				this.OnNoteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_No", DbType="Int NOT NULL")]
	public int No
	{
		get
		{
			return this._No;
		}
		set
		{
			if ((this._No != value))
			{
				this.OnNoChanging(value);
				this.SendPropertyChanging();
				this._No = value;
				this.SendPropertyChanged("No");
				this.OnNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbProduct_tbSellingHistoryDetail", Storage="_tbProduct", ThisKey="IDProduct", OtherKey="IDProduct", IsForeignKey=true)]
	public tbProduct tbProduct
	{
		get
		{
			return this._tbProduct.Entity;
		}
		set
		{
			tbProduct previousValue = this._tbProduct.Entity;
			if (((previousValue != value) 
						|| (this._tbProduct.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbProduct.Entity = null;
					previousValue.tbSellingHistoryDetail.Remove(this);
				}
				this._tbProduct.Entity = value;
				if ((value != null))
				{
					value.tbSellingHistoryDetail.Add(this);
					this._IDProduct = value.IDProduct;
				}
				else
				{
					this._IDProduct = default(int);
				}
				this.SendPropertyChanged("tbProduct");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSellingHistory_tbSellingHistoryDetail", Storage="_tbSellingHistory", ThisKey="OrderNo", OtherKey="OrderNo", IsForeignKey=true)]
	public tbSellingHistory tbSellingHistory
	{
		get
		{
			return this._tbSellingHistory.Entity;
		}
		set
		{
			tbSellingHistory previousValue = this._tbSellingHistory.Entity;
			if (((previousValue != value) 
						|| (this._tbSellingHistory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbSellingHistory.Entity = null;
					previousValue.tbSellingHistoryDetail.Remove(this);
				}
				this._tbSellingHistory.Entity = value;
				if ((value != null))
				{
					value.tbSellingHistoryDetail.Add(this);
					this._OrderNo = value.OrderNo;
				}
				else
				{
					this._OrderNo = default(string);
				}
				this.SendPropertyChanged("tbSellingHistory");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbStaff")]
public partial class tbStaff : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDStaff;
	
	private string _Name;
	
	private string _Position;
	
	private string _Email;
	
	private string _Tel;
	
	private string _Image;
	
	private string _IDCard;
	
	private string _Address;
	
	private EntitySet<tbLogin> _tbLogin;
	
	private EntitySet<tbPriceHistory> _tbPriceHistory;
	
	private EntitySet<tbSellingHistory> _tbSellingHistory;
	
	private EntitySet<tbQuotation> _tbQuotation;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDStaffChanging(int value);
    partial void OnIDStaffChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnImageChanging(string value);
    partial void OnImageChanged();
    partial void OnIDCardChanging(string value);
    partial void OnIDCardChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
	
	public tbStaff()
	{
		this._tbLogin = new EntitySet<tbLogin>(new Action<tbLogin>(this.attach_tbLogin), new Action<tbLogin>(this.detach_tbLogin));
		this._tbPriceHistory = new EntitySet<tbPriceHistory>(new Action<tbPriceHistory>(this.attach_tbPriceHistory), new Action<tbPriceHistory>(this.detach_tbPriceHistory));
		this._tbSellingHistory = new EntitySet<tbSellingHistory>(new Action<tbSellingHistory>(this.attach_tbSellingHistory), new Action<tbSellingHistory>(this.detach_tbSellingHistory));
		this._tbQuotation = new EntitySet<tbQuotation>(new Action<tbQuotation>(this.attach_tbQuotation), new Action<tbQuotation>(this.detach_tbQuotation));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStaff", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDStaff
	{
		get
		{
			return this._IDStaff;
		}
		set
		{
			if ((this._IDStaff != value))
			{
				this.OnIDStaffChanging(value);
				this.SendPropertyChanging();
				this._IDStaff = value;
				this.SendPropertyChanged("IDStaff");
				this.OnIDStaffChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(30)")]
	public string Position
	{
		get
		{
			return this._Position;
		}
		set
		{
			if ((this._Position != value))
			{
				this.OnPositionChanging(value);
				this.SendPropertyChanging();
				this._Position = value;
				this.SendPropertyChanged("Position");
				this.OnPositionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(20)")]
	public string Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="NVarChar(MAX)")]
	public string Image
	{
		get
		{
			return this._Image;
		}
		set
		{
			if ((this._Image != value))
			{
				this.OnImageChanging(value);
				this.SendPropertyChanging();
				this._Image = value;
				this.SendPropertyChanged("Image");
				this.OnImageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCard", DbType="VarChar(20)")]
	public string IDCard
	{
		get
		{
			return this._IDCard;
		}
		set
		{
			if ((this._IDCard != value))
			{
				this.OnIDCardChanging(value);
				this.SendPropertyChanging();
				this._IDCard = value;
				this.SendPropertyChanged("IDCard");
				this.OnIDCardChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(100)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbLogin", Storage="_tbLogin", ThisKey="IDStaff", OtherKey="IDStaff")]
	public EntitySet<tbLogin> tbLogin
	{
		get
		{
			return this._tbLogin;
		}
		set
		{
			this._tbLogin.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbPriceHistory", Storage="_tbPriceHistory", ThisKey="IDStaff", OtherKey="IDStaff")]
	public EntitySet<tbPriceHistory> tbPriceHistory
	{
		get
		{
			return this._tbPriceHistory;
		}
		set
		{
			this._tbPriceHistory.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbSellingHistory", Storage="_tbSellingHistory", ThisKey="IDStaff", OtherKey="IDStaff")]
	public EntitySet<tbSellingHistory> tbSellingHistory
	{
		get
		{
			return this._tbSellingHistory;
		}
		set
		{
			this._tbSellingHistory.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbQuotation", Storage="_tbQuotation", ThisKey="IDStaff", OtherKey="IDStaff")]
	public EntitySet<tbQuotation> tbQuotation
	{
		get
		{
			return this._tbQuotation;
		}
		set
		{
			this._tbQuotation.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbLogin(tbLogin entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = this;
	}
	
	private void detach_tbLogin(tbLogin entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = null;
	}
	
	private void attach_tbPriceHistory(tbPriceHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = this;
	}
	
	private void detach_tbPriceHistory(tbPriceHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = null;
	}
	
	private void attach_tbSellingHistory(tbSellingHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = this;
	}
	
	private void detach_tbSellingHistory(tbSellingHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = null;
	}
	
	private void attach_tbQuotation(tbQuotation entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = this;
	}
	
	private void detach_tbQuotation(tbQuotation entity)
	{
		this.SendPropertyChanging();
		entity.tbStaff = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbSupplier")]
public partial class tbSupplier : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDSupplier;
	
	private string _Name;
	
	private string _Address;
	
	private string _Tel;
	
	private string _IBAN;
	
	private string _SWIFT;
	
	private string _Bank;
	
	private string _BankAddress;
	
	private string _Website;
	
	private EntitySet<tbSupply> _tbSupply;
	
	private EntitySet<tbBuyingHistory> _tbBuyingHistory;
	
	private EntitySet<tbSupplierContact> _tbSupplierContact;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSupplierChanging(int value);
    partial void OnIDSupplierChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnIBANChanging(string value);
    partial void OnIBANChanged();
    partial void OnSWIFTChanging(string value);
    partial void OnSWIFTChanged();
    partial void OnBankChanging(string value);
    partial void OnBankChanged();
    partial void OnBankAddressChanging(string value);
    partial void OnBankAddressChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    #endregion
	
	public tbSupplier()
	{
		this._tbSupply = new EntitySet<tbSupply>(new Action<tbSupply>(this.attach_tbSupply), new Action<tbSupply>(this.detach_tbSupply));
		this._tbBuyingHistory = new EntitySet<tbBuyingHistory>(new Action<tbBuyingHistory>(this.attach_tbBuyingHistory), new Action<tbBuyingHistory>(this.detach_tbBuyingHistory));
		this._tbSupplierContact = new EntitySet<tbSupplierContact>(new Action<tbSupplierContact>(this.attach_tbSupplierContact), new Action<tbSupplierContact>(this.detach_tbSupplierContact));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplier", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDSupplier
	{
		get
		{
			return this._IDSupplier;
		}
		set
		{
			if ((this._IDSupplier != value))
			{
				this.OnIDSupplierChanging(value);
				this.SendPropertyChanging();
				this._IDSupplier = value;
				this.SendPropertyChanged("IDSupplier");
				this.OnIDSupplierChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="NVarChar(20)")]
	public string Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IBAN", DbType="VarChar(100)")]
	public string IBAN
	{
		get
		{
			return this._IBAN;
		}
		set
		{
			if ((this._IBAN != value))
			{
				this.OnIBANChanging(value);
				this.SendPropertyChanging();
				this._IBAN = value;
				this.SendPropertyChanged("IBAN");
				this.OnIBANChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SWIFT", DbType="VarChar(100)")]
	public string SWIFT
	{
		get
		{
			return this._SWIFT;
		}
		set
		{
			if ((this._SWIFT != value))
			{
				this.OnSWIFTChanging(value);
				this.SendPropertyChanging();
				this._SWIFT = value;
				this.SendPropertyChanged("SWIFT");
				this.OnSWIFTChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bank", DbType="NVarChar(100)")]
	public string Bank
	{
		get
		{
			return this._Bank;
		}
		set
		{
			if ((this._Bank != value))
			{
				this.OnBankChanging(value);
				this.SendPropertyChanging();
				this._Bank = value;
				this.SendPropertyChanged("Bank");
				this.OnBankChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankAddress", DbType="NVarChar(300)")]
	public string BankAddress
	{
		get
		{
			return this._BankAddress;
		}
		set
		{
			if ((this._BankAddress != value))
			{
				this.OnBankAddressChanging(value);
				this.SendPropertyChanging();
				this._BankAddress = value;
				this.SendPropertyChanged("BankAddress");
				this.OnBankAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Website", DbType="VarChar(100)")]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSupplier_tbSupply", Storage="_tbSupply", ThisKey="IDSupplier", OtherKey="IDSupplier")]
	public EntitySet<tbSupply> tbSupply
	{
		get
		{
			return this._tbSupply;
		}
		set
		{
			this._tbSupply.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSupplier_tbBuyingHistory", Storage="_tbBuyingHistory", ThisKey="IDSupplier", OtherKey="IDSupplier")]
	public EntitySet<tbBuyingHistory> tbBuyingHistory
	{
		get
		{
			return this._tbBuyingHistory;
		}
		set
		{
			this._tbBuyingHistory.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSupplier_tbSupplierContact", Storage="_tbSupplierContact", ThisKey="IDSupplier", OtherKey="IDSupplier")]
	public EntitySet<tbSupplierContact> tbSupplierContact
	{
		get
		{
			return this._tbSupplierContact;
		}
		set
		{
			this._tbSupplierContact.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbSupply(tbSupply entity)
	{
		this.SendPropertyChanging();
		entity.tbSupplier = this;
	}
	
	private void detach_tbSupply(tbSupply entity)
	{
		this.SendPropertyChanging();
		entity.tbSupplier = null;
	}
	
	private void attach_tbBuyingHistory(tbBuyingHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbSupplier = this;
	}
	
	private void detach_tbBuyingHistory(tbBuyingHistory entity)
	{
		this.SendPropertyChanging();
		entity.tbSupplier = null;
	}
	
	private void attach_tbSupplierContact(tbSupplierContact entity)
	{
		this.SendPropertyChanging();
		entity.tbSupplier = this;
	}
	
	private void detach_tbSupplierContact(tbSupplierContact entity)
	{
		this.SendPropertyChanging();
		entity.tbSupplier = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbSupplierContact")]
public partial class tbSupplierContact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDSupplierContact;
	
	private int _IDSupplier;
	
	private string _Name;
	
	private string _Tel;
	
	private string _Email;
	
	private EntityRef<tbSupplier> _tbSupplier;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDSupplierContactChanging(int value);
    partial void OnIDSupplierContactChanged();
    partial void OnIDSupplierChanging(int value);
    partial void OnIDSupplierChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
	
	public tbSupplierContact()
	{
		this._tbSupplier = default(EntityRef<tbSupplier>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplierContact", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDSupplierContact
	{
		get
		{
			return this._IDSupplierContact;
		}
		set
		{
			if ((this._IDSupplierContact != value))
			{
				this.OnIDSupplierContactChanging(value);
				this.SendPropertyChanging();
				this._IDSupplierContact = value;
				this.SendPropertyChanged("IDSupplierContact");
				this.OnIDSupplierContactChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDSupplier", DbType="Int NOT NULL")]
	public int IDSupplier
	{
		get
		{
			return this._IDSupplier;
		}
		set
		{
			if ((this._IDSupplier != value))
			{
				if (this._tbSupplier.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDSupplierChanging(value);
				this.SendPropertyChanging();
				this._IDSupplier = value;
				this.SendPropertyChanged("IDSupplier");
				this.OnIDSupplierChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(20)")]
	public string Tel
	{
		get
		{
			return this._Tel;
		}
		set
		{
			if ((this._Tel != value))
			{
				this.OnTelChanging(value);
				this.SendPropertyChanging();
				this._Tel = value;
				this.SendPropertyChanged("Tel");
				this.OnTelChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSupplier_tbSupplierContact", Storage="_tbSupplier", ThisKey="IDSupplier", OtherKey="IDSupplier", IsForeignKey=true)]
	public tbSupplier tbSupplier
	{
		get
		{
			return this._tbSupplier.Entity;
		}
		set
		{
			tbSupplier previousValue = this._tbSupplier.Entity;
			if (((previousValue != value) 
						|| (this._tbSupplier.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbSupplier.Entity = null;
					previousValue.tbSupplierContact.Remove(this);
				}
				this._tbSupplier.Entity = value;
				if ((value != null))
				{
					value.tbSupplierContact.Add(this);
					this._IDSupplier = value.IDSupplier;
				}
				else
				{
					this._IDSupplier = default(int);
				}
				this.SendPropertyChanged("tbSupplier");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="bthg.tbLanguage")]
public partial class tbLanguage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDLanguage;
	
	private string _LanguageName;
	
	private EntitySet<tbLanguageTranslation> _tbLanguageTranslation;
	
	private EntitySet<tbQuotation> _tbQuotation;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLanguageChanging(int value);
    partial void OnIDLanguageChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    #endregion
	
	public tbLanguage()
	{
		this._tbLanguageTranslation = new EntitySet<tbLanguageTranslation>(new Action<tbLanguageTranslation>(this.attach_tbLanguageTranslation), new Action<tbLanguageTranslation>(this.detach_tbLanguageTranslation));
		this._tbQuotation = new EntitySet<tbQuotation>(new Action<tbQuotation>(this.attach_tbQuotation), new Action<tbQuotation>(this.detach_tbQuotation));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLanguage", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDLanguage
	{
		get
		{
			return this._IDLanguage;
		}
		set
		{
			if ((this._IDLanguage != value))
			{
				this.OnIDLanguageChanging(value);
				this.SendPropertyChanging();
				this._IDLanguage = value;
				this.SendPropertyChanged("IDLanguage");
				this.OnIDLanguageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string LanguageName
	{
		get
		{
			return this._LanguageName;
		}
		set
		{
			if ((this._LanguageName != value))
			{
				this.OnLanguageNameChanging(value);
				this.SendPropertyChanging();
				this._LanguageName = value;
				this.SendPropertyChanged("LanguageName");
				this.OnLanguageNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLanguage_tbLanguageTranslation", Storage="_tbLanguageTranslation", ThisKey="IDLanguage", OtherKey="IDLanguage")]
	public EntitySet<tbLanguageTranslation> tbLanguageTranslation
	{
		get
		{
			return this._tbLanguageTranslation;
		}
		set
		{
			this._tbLanguageTranslation.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLanguage_tbQuotation", Storage="_tbQuotation", ThisKey="IDLanguage", OtherKey="LanguageID")]
	public EntitySet<tbQuotation> tbQuotation
	{
		get
		{
			return this._tbQuotation;
		}
		set
		{
			this._tbQuotation.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbLanguageTranslation(tbLanguageTranslation entity)
	{
		this.SendPropertyChanging();
		entity.tbLanguage = this;
	}
	
	private void detach_tbLanguageTranslation(tbLanguageTranslation entity)
	{
		this.SendPropertyChanging();
		entity.tbLanguage = null;
	}
	
	private void attach_tbQuotation(tbQuotation entity)
	{
		this.SendPropertyChanging();
		entity.tbLanguage = this;
	}
	
	private void detach_tbQuotation(tbQuotation entity)
	{
		this.SendPropertyChanging();
		entity.tbLanguage = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="bthg.tbLanguageConcept")]
public partial class tbLanguageConcept : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _LanguageConcept;
	
	private EntitySet<tbLanguageTranslation> _tbLanguageTranslation;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageConceptChanging(string value);
    partial void OnLanguageConceptChanged();
    #endregion
	
	public tbLanguageConcept()
	{
		this._tbLanguageTranslation = new EntitySet<tbLanguageTranslation>(new Action<tbLanguageTranslation>(this.attach_tbLanguageTranslation), new Action<tbLanguageTranslation>(this.detach_tbLanguageTranslation));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageConcept", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string LanguageConcept
	{
		get
		{
			return this._LanguageConcept;
		}
		set
		{
			if ((this._LanguageConcept != value))
			{
				this.OnLanguageConceptChanging(value);
				this.SendPropertyChanging();
				this._LanguageConcept = value;
				this.SendPropertyChanged("LanguageConcept");
				this.OnLanguageConceptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLanguageConcept_tbLanguageTranslation", Storage="_tbLanguageTranslation", ThisKey="LanguageConcept", OtherKey="LanguageConcept")]
	public EntitySet<tbLanguageTranslation> tbLanguageTranslation
	{
		get
		{
			return this._tbLanguageTranslation;
		}
		set
		{
			this._tbLanguageTranslation.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_tbLanguageTranslation(tbLanguageTranslation entity)
	{
		this.SendPropertyChanging();
		entity.tbLanguageConcept = this;
	}
	
	private void detach_tbLanguageTranslation(tbLanguageTranslation entity)
	{
		this.SendPropertyChanging();
		entity.tbLanguageConcept = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="bthg.tbLanguageTranslation")]
public partial class tbLanguageTranslation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _LanguageConcept;
	
	private int _IDLanguage;
	
	private string _Translation;
	
	private EntityRef<tbLanguage> _tbLanguage;
	
	private EntityRef<tbLanguageConcept> _tbLanguageConcept;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageConceptChanging(string value);
    partial void OnLanguageConceptChanged();
    partial void OnIDLanguageChanging(int value);
    partial void OnIDLanguageChanged();
    partial void OnTranslationChanging(string value);
    partial void OnTranslationChanged();
    #endregion
	
	public tbLanguageTranslation()
	{
		this._tbLanguage = default(EntityRef<tbLanguage>);
		this._tbLanguageConcept = default(EntityRef<tbLanguageConcept>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageConcept", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string LanguageConcept
	{
		get
		{
			return this._LanguageConcept;
		}
		set
		{
			if ((this._LanguageConcept != value))
			{
				if (this._tbLanguageConcept.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLanguageConceptChanging(value);
				this.SendPropertyChanging();
				this._LanguageConcept = value;
				this.SendPropertyChanged("LanguageConcept");
				this.OnLanguageConceptChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLanguage", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IDLanguage
	{
		get
		{
			return this._IDLanguage;
		}
		set
		{
			if ((this._IDLanguage != value))
			{
				if (this._tbLanguage.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDLanguageChanging(value);
				this.SendPropertyChanging();
				this._IDLanguage = value;
				this.SendPropertyChanged("IDLanguage");
				this.OnIDLanguageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Translation", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Translation
	{
		get
		{
			return this._Translation;
		}
		set
		{
			if ((this._Translation != value))
			{
				this.OnTranslationChanging(value);
				this.SendPropertyChanging();
				this._Translation = value;
				this.SendPropertyChanged("Translation");
				this.OnTranslationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLanguage_tbLanguageTranslation", Storage="_tbLanguage", ThisKey="IDLanguage", OtherKey="IDLanguage", IsForeignKey=true)]
	public tbLanguage tbLanguage
	{
		get
		{
			return this._tbLanguage.Entity;
		}
		set
		{
			tbLanguage previousValue = this._tbLanguage.Entity;
			if (((previousValue != value) 
						|| (this._tbLanguage.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbLanguage.Entity = null;
					previousValue.tbLanguageTranslation.Remove(this);
				}
				this._tbLanguage.Entity = value;
				if ((value != null))
				{
					value.tbLanguageTranslation.Add(this);
					this._IDLanguage = value.IDLanguage;
				}
				else
				{
					this._IDLanguage = default(int);
				}
				this.SendPropertyChanged("tbLanguage");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLanguageConcept_tbLanguageTranslation", Storage="_tbLanguageConcept", ThisKey="LanguageConcept", OtherKey="LanguageConcept", IsForeignKey=true)]
	public tbLanguageConcept tbLanguageConcept
	{
		get
		{
			return this._tbLanguageConcept.Entity;
		}
		set
		{
			tbLanguageConcept previousValue = this._tbLanguageConcept.Entity;
			if (((previousValue != value) 
						|| (this._tbLanguageConcept.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbLanguageConcept.Entity = null;
					previousValue.tbLanguageTranslation.Remove(this);
				}
				this._tbLanguageConcept.Entity = value;
				if ((value != null))
				{
					value.tbLanguageTranslation.Add(this);
					this._LanguageConcept = value.LanguageConcept;
				}
				else
				{
					this._LanguageConcept = default(string);
				}
				this.SendPropertyChanged("tbLanguageConcept");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="bthg.tbQuotation")]
public partial class tbQuotation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IDQuotation;
	
	private string _OrderNo;
	
	private System.DateTime _QuoteDate;
	
	private int _LanguageID;
	
	private string _Terms;
	
	private int _IDStaff;
	
	private EntityRef<tbLanguage> _tbLanguage;
	
	private EntityRef<tbSellingHistory> _tbSellingHistory;
	
	private EntityRef<tbStaff> _tbStaff;
	
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDQuotationChanging(int value);
    partial void OnIDQuotationChanged();
    partial void OnOrderNoChanging(string value);
    partial void OnOrderNoChanged();
    partial void OnQuoteDateChanging(System.DateTime value);
    partial void OnQuoteDateChanged();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnTermsChanging(string value);
    partial void OnTermsChanged();
    partial void OnIDStaffChanging(int value);
    partial void OnIDStaffChanged();
    #endregion
	
	public tbQuotation()
	{
		this._tbLanguage = default(EntityRef<tbLanguage>);
		this._tbSellingHistory = default(EntityRef<tbSellingHistory>);
		this._tbStaff = default(EntityRef<tbStaff>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDQuotation", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IDQuotation
	{
		get
		{
			return this._IDQuotation;
		}
		set
		{
			if ((this._IDQuotation != value))
			{
				this.OnIDQuotationChanging(value);
				this.SendPropertyChanging();
				this._IDQuotation = value;
				this.SendPropertyChanged("IDQuotation");
				this.OnIDQuotationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string OrderNo
	{
		get
		{
			return this._OrderNo;
		}
		set
		{
			if ((this._OrderNo != value))
			{
				if (this._tbSellingHistory.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOrderNoChanging(value);
				this.SendPropertyChanging();
				this._OrderNo = value;
				this.SendPropertyChanged("OrderNo");
				this.OnOrderNoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuoteDate", DbType="DateTime NOT NULL")]
	public System.DateTime QuoteDate
	{
		get
		{
			return this._QuoteDate;
		}
		set
		{
			if ((this._QuoteDate != value))
			{
				this.OnQuoteDateChanging(value);
				this.SendPropertyChanging();
				this._QuoteDate = value;
				this.SendPropertyChanged("QuoteDate");
				this.OnQuoteDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="Int NOT NULL")]
	public int LanguageID
	{
		get
		{
			return this._LanguageID;
		}
		set
		{
			if ((this._LanguageID != value))
			{
				if (this._tbLanguage.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnLanguageIDChanging(value);
				this.SendPropertyChanging();
				this._LanguageID = value;
				this.SendPropertyChanged("LanguageID");
				this.OnLanguageIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Terms
	{
		get
		{
			return this._Terms;
		}
		set
		{
			if ((this._Terms != value))
			{
				this.OnTermsChanging(value);
				this.SendPropertyChanging();
				this._Terms = value;
				this.SendPropertyChanged("Terms");
				this.OnTermsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStaff", DbType="Int NOT NULL")]
	public int IDStaff
	{
		get
		{
			return this._IDStaff;
		}
		set
		{
			if ((this._IDStaff != value))
			{
				if (this._tbStaff.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDStaffChanging(value);
				this.SendPropertyChanging();
				this._IDStaff = value;
				this.SendPropertyChanged("IDStaff");
				this.OnIDStaffChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbLanguage_tbQuotation", Storage="_tbLanguage", ThisKey="LanguageID", OtherKey="IDLanguage", IsForeignKey=true)]
	public tbLanguage tbLanguage
	{
		get
		{
			return this._tbLanguage.Entity;
		}
		set
		{
			tbLanguage previousValue = this._tbLanguage.Entity;
			if (((previousValue != value) 
						|| (this._tbLanguage.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbLanguage.Entity = null;
					previousValue.tbQuotation.Remove(this);
				}
				this._tbLanguage.Entity = value;
				if ((value != null))
				{
					value.tbQuotation.Add(this);
					this._LanguageID = value.IDLanguage;
				}
				else
				{
					this._LanguageID = default(int);
				}
				this.SendPropertyChanged("tbLanguage");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbSellingHistory_tbQuotation", Storage="_tbSellingHistory", ThisKey="OrderNo", OtherKey="OrderNo", IsForeignKey=true)]
	public tbSellingHistory tbSellingHistory
	{
		get
		{
			return this._tbSellingHistory.Entity;
		}
		set
		{
			tbSellingHistory previousValue = this._tbSellingHistory.Entity;
			if (((previousValue != value) 
						|| (this._tbSellingHistory.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbSellingHistory.Entity = null;
					previousValue.tbQuotation.Remove(this);
				}
				this._tbSellingHistory.Entity = value;
				if ((value != null))
				{
					value.tbQuotation.Add(this);
					this._OrderNo = value.OrderNo;
				}
				else
				{
					this._OrderNo = default(string);
				}
				this.SendPropertyChanged("tbSellingHistory");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tbStaff_tbQuotation", Storage="_tbStaff", ThisKey="IDStaff", OtherKey="IDStaff", IsForeignKey=true)]
	public tbStaff tbStaff
	{
		get
		{
			return this._tbStaff.Entity;
		}
		set
		{
			tbStaff previousValue = this._tbStaff.Entity;
			if (((previousValue != value) 
						|| (this._tbStaff.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._tbStaff.Entity = null;
					previousValue.tbQuotation.Remove(this);
				}
				this._tbStaff.Entity = value;
				if ((value != null))
				{
					value.tbQuotation.Add(this);
					this._IDStaff = value.IDStaff;
				}
				else
				{
					this._IDStaff = default(int);
				}
				this.SendPropertyChanged("tbStaff");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
